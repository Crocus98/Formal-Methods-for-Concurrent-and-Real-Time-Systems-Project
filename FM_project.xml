<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//Train settings
const int NUM_TRAINS = 7;
const int SPEED[NUM_TRAINS] = {7,7,8,9,7,10,8};
const int MAX_CHARGE[NUM_TRAINS] = {150, 150, 150, 150, 150, 150, 150};
const int INITIAL_CHARGE[NUM_TRAINS] ={100,100,100,100,100,100,100}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0,0,0,0,0,1,1};
const int T_LINES[NUM_TRAINS] = {1, 1, 0, 2, 1, 0, 1};
const int NEXT_STATION[NUM_TRAINS] = {0,0,0,0,0,0,0}; //must be inside the line


//Station settings
const int NUM_STATIONS = 5;
const int MAX_TRACKS[NUM_STATIONS] = {4,3,5,3,4};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;

//Railways settins
const int NUM_LINES = 3;
const int NUM_MAX_STATIONS_LINE = 4;
const int LINES [NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2,3},{0,1,2,4},{3,2,4,-1}}; //0,1,2
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,70,-1,-1,-1},
                                                     {70,0,50,-1,-1},
                                                     {-1,50,0,60,80},
                                                     {-1,-1,60,0,-1},
                                                     {-1,-1,80,-1,0}};
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,15,-1,-1,-1},
                                                     {15,0,11,-1,-1},
                                                     {-1,11,0,12,16},
                                                     {-1,-1,12,0,-1},
                                                     {-1,-1,16,-1,0}};

//Channels
chan enter_station_request[NUM_TRAINS][NUM_STATIONS];
chan enter_station_reply_ok[NUM_TRAINS][NUM_STATIONS];
chan enter_station_reply_ko[NUM_TRAINS][NUM_STATIONS];
chan exit_station[NUM_STATIONS];
broadcast chan leave_station[NUM_STATIONS];

</declaration>
	<template>
		<name x="5" y="5">Train</name>
		<parameter>const int [0,6] id_train, int charge, const int max_charge, const int speed,  int current_station, const int line, int next_station</parameter>
		<declaration>clock mov_time;
clock waiting_time;

int request_threshold = 2, passengers_threshold = 5;





//Functions
int compute_minimal_charge (int source, int destination){
    return MAX_DELAYS[source][destination];
}

int compute_minimal_distance (int id_train, int source, int destination){
    return DISTANCES[source][destination]/SPEED[id_train];
}

void decrease_charge(){
    charge -= 1;
    if(charge &lt;= 0){
        charge = 0;
    }
}

void increase_charge(){
    charge += 3;
    if(charge &gt; max_charge){
        charge = max_charge;
    }
}

void update_train_info(){
    int next_index = 0;
    for (current_index : int[0, NUM_MAX_STATIONS_LINE-1])
    {
        if(LINES[line][current_index] == current_station){
            current_station = next_station;
            next_index = current_index;
            //Find indexes in the line of the current and next station
            if(next_index-1 &lt; 0 || LINES[line][next_index-1] == -1){
                next_index = next_index + 1;
            }
            else if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1] == -1){
                next_index = next_index - 1;
            }
            else{
                if(LINES[line][next_index+1] == next_station){
                    next_index = next_index+1;
                }
                else if(LINES[line][next_index-1] == next_station){
                    next_index = next_index-1;
                }
            }
            if(current_index &lt; next_index){
                if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1]== -1)
                {
                    next_index -= 1;
                }
                else
                {
                    next_index += 1;
                }
            }
            else if(next_index -1 &lt; 0)
            {
                next_index +=1;
            }
            else
            {
                next_index -=1;
            }
            next_station = LINES[line][next_index];
            return;
        }
    }
    current_station = next_station;
}</declaration>
		<location id="id0" x="-1538" y="-696">
			<name x="-1564" y="-722">Charging</name>
			<label kind="invariant" x="-1657" y="-739">waiting_time &lt;= PASSENGERS_TIME</label>
		</location>
		<location id="id1" x="-1538" y="-501">
			<name x="-1530" y="-493">Overcharging</name>
		</location>
		<location id="id2" x="-1266" y="-501">
			<name x="-1301" y="-493">Forced_exit</name>
		</location>
		<location id="id3" x="-1028" y="-501">
			<name x="-1079" y="-493">Moving</name>
		</location>
		<location id="id4" x="-1283" y="-212">
		</location>
		<location id="id5" x="-1028" y="-697">
			<name x="-1088" y="-680">Waiting</name>
		</location>
		<location id="id6" x="-1028" y="-901">
			<label kind="invariant" x="-1147" y="-935">waiting_time &lt;= REQUEST_DELAY</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id6"/>
			<target ref="id5"/>
			<label kind="guard" x="-1249" y="-824">waiting_time &gt; REQUEST_DELAY</label>
			<label kind="synchronisation" x="-1292" y="-807">enter_station_request[id_train][next_station]!</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="-943" y="-824">enter_station_reply_ko[id_train][next_station]?</label>
			<label kind="assignment" x="-943" y="-807">waiting_time = 0</label>
			<nail x="-952" y="-697"/>
			<nail x="-952" y="-901"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1368" y="-731">enter_station_reply_ok[id_train][next_station]?</label>
			<label kind="assignment" x="-1334" y="-714">waiting_time = 0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="-1368" y="-620">mov_time &gt;= compute_minimal_distance(id_train,current_station,next_station)</label>
			<label kind="synchronisation" x="-1300" y="-603">enter_station_request[id_train][next_station]!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="guard" x="-969" y="-408">charge &gt; 0 &amp;&amp; mov_time &lt; compute_minimal_distance(id_train,current_station,next_station)</label>
			<label kind="assignment" x="-875" y="-425">decrease_charge()</label>
			<nail x="-807" y="-501"/>
			<nail x="-807" y="-425"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-1402" y="-340">charge == max_charge</label>
			<label kind="synchronisation" x="-1419" y="-323">exit_station[current_station]!</label>
			<label kind="assignment" x="-1368" y="-306">mov_time = 0</label>
			<nail x="-1538" y="-340"/>
			<nail x="-1028" y="-340"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-1241" y="-527">exit_station[current_station]!</label>
			<label kind="assignment" x="-1207" y="-518">mov_time = 0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation" x="-1504" y="-518">leave_station[current_station]?</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-1937" y="-543">charge &lt; max_charge</label>
			<label kind="assignment" x="-1912" y="-526">increase_charge()</label>
			<nail x="-1793" y="-501"/>
			<nail x="-1793" y="-569"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="guard" x="-1963" y="-781">charge &lt; compute_minimal_charge(current_station,next_station)</label>
			<label kind="assignment" x="-1963" y="-764">increase_charge()</label>
			<nail x="-1793" y="-696"/>
			<nail x="-1793" y="-764"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1954" y="-628">charge &gt;= compute_minimal_charge(current_station,next_station)</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0,4] id_station,const int max_tracks</parameter>
		<declaration>//Station variables
int trains_inside = 0;
int [0, NUM_TRAINS-1] temp_train;


//Station functions
void increase_inside_count(){
    trains_inside += 1;
}

void decrease_inside_count(){
    trains_inside -= 1;
}

bool authorization_granted(){
    if(trains_inside &lt; max_tracks){
        return true;
    }
    return false;
}</declaration>
		<location id="id7" x="-2363" y="-1198">
			<name x="-2354" y="-1190">Idle</name>
		</location>
		<location id="id8" x="-2150" y="-909">
			<committed/>
		</location>
		<location id="id9" x="-1921" y="-1037">
			<committed/>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2686" y="-1198">exit_station[id_station]?</label>
			<label kind="assignment" x="-2694" y="-1181">decrease_inside_count()</label>
			<nail x="-2533" y="-1198"/>
			<nail x="-2533" y="-1147"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2218" y="-1326">leave_station[id_station]!</label>
			<nail x="-1921" y="-1309"/>
			<nail x="-2363" y="-1309"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id9"/>
			<label kind="guard" x="-2006" y="-909">not authorization_granted()</label>
			<label kind="synchronisation" x="-2048" y="-892">enter_station_reply_ko[temp_train][id_station]!</label>
			<nail x="-1921" y="-909"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2261" y="-1258">authorization_granted()</label>
			<label kind="synchronisation" x="-2312" y="-1224">enter_station_reply_ok[temp_train][id_station]!</label>
			<label kind="assignment" x="-2261" y="-1241">increase_inside_count()</label>
			<nail x="-2150" y="-1020"/>
			<nail x="-2150" y="-1198"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-2516" y="-900">id_train: int[0, NUM_TRAINS-1]</label>
			<label kind="synchronisation" x="-2559" y="-883">enter_station_request[id_train][id_station]?</label>
			<label kind="assignment" x="-2491" y="-866">temp_train = id_train</label>
			<nail x="-2363" y="-909"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
//id_train, charge, max_charge, speed, current_station, line, next_station
train_0 = Train (0, INITIAL_CHARGE[0], MAX_CHARGE[0], SPEED[0], INITIAL_STATION[0], T_LINES[0], NEXT_STATION[0]);
train_1 = Train (1, INITIAL_CHARGE[1], MAX_CHARGE[1], SPEED[1], INITIAL_STATION[1], T_LINES[1], NEXT_STATION[1]);
train_2 = Train (2, INITIAL_CHARGE[2], MAX_CHARGE[2], SPEED[2], INITIAL_STATION[2], T_LINES[2], NEXT_STATION[2]);
train_3 = Train (3, INITIAL_CHARGE[3], MAX_CHARGE[3], SPEED[3], INITIAL_STATION[3], T_LINES[3], NEXT_STATION[3]);
train_4 = Train (4, INITIAL_CHARGE[4], MAX_CHARGE[4], SPEED[4], INITIAL_STATION[4], T_LINES[4], NEXT_STATION[4]);
train_5 = Train (5, INITIAL_CHARGE[5], MAX_CHARGE[5], SPEED[5], INITIAL_STATION[5], T_LINES[5], NEXT_STATION[5]);
train_6 = Train (6, INITIAL_CHARGE[6], MAX_CHARGE[6], SPEED[6], INITIAL_STATION[6], T_LINES[6], NEXT_STATION[6]);


station_0 = Station(0,3);

// List one or more processes to be composed into a system.
system train_0, train_1, train_2, train_3, train_4, train_5, train_6, station_0;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
