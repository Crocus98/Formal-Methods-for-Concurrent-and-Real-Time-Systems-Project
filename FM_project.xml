<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>//SIMPLE SETTINGS
//Train settings
const int NUM_TRAINS = 3;
const int RECHARGING_MULTIPLIER = 3;
const int SPEED[NUM_TRAINS] = {7,10,8};
const int MAX_CHARGE[NUM_TRAINS] = {30,35,28}; //time
const int INITIAL_CHARGE[NUM_TRAINS] ={28,30,25}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0,1,2};
const int T_LINES[NUM_TRAINS] = {0,0,0};
const int NEXT_STATION[NUM_TRAINS] = {1,0,1}; //must be inside the line


//Station settings
const int NUM_STATIONS = 3;
const int MAX_TRACKS[NUM_STATIONS] = {2,2,1};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;
const int INITIAL_TRAINS_INSIDE[NUM_STATIONS] = {1,1,1};
int FORCED_TO_LEAVE_COUNT [NUM_STATIONS] = {0,0,0};

//Railways settins
const int NUM_LINES = 1;
const int NUM_MAX_STATIONS_LINE = 3;
const int LINES[NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2}}; //0,1,2
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,70,-1},
                                                   {70,0,50},
                                                   {-1,50,0}};
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,100,-1},
                                                    {100,0,100},
                                                    {-1,100,0}};

//Channels
broadcast chan enter_station_request[NUM_TRAINS][NUM_STATIONS];
urgent chan enter_station_reply_ok[NUM_TRAINS][NUM_STATIONS]; //broadcast
urgent chan enter_station_reply_ko[NUM_TRAINS][NUM_STATIONS]; //broadcast
chan exit_station[NUM_STATIONS];
urgent broadcast chan leave_station[NUM_STATIONS];

/*
//COMPLETE SETTINGS
//Train settings
const int NUM_TRAINS = 7;
const int RECHARGING_MULTIPLIER = 3;
const int SPEED[NUM_TRAINS] = {7,7,8,9,7,10,8};
const int MAX_CHARGE[NUM_TRAINS] = {30, 32, 32, 28, 24, 18, 35}; //time
const int INITIAL_CHARGE[NUM_TRAINS] ={28,28,32,25,24,18,30}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0,3,0,4,4,3,0};
const int T_LINES[NUM_TRAINS] = {1,2,0,2,1,0,1};
const int NEXT_STATION[NUM_TRAINS] = {1,2,1,2,2,2,1}; //must be inside the line


//Station settings
const int NUM_STATIONS = 5;
const int MAX_TRACKS[NUM_STATIONS] = {4,3,5,3,4};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;
const int INITIAL_TRAINS_INSIDE[NUM_STATIONS] = {3,0,0,2,2};
int FORCED_TO_LEAVE_COUNT [NUM_STATIONS] = {0,0,0,0,0};

//Railways settins
const int NUM_LINES = 3;
const int NUM_MAX_STATIONS_LINE = 4;
const int LINES [NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2,3},{0,1,2,4},{3,2,4,-1}}; //0,1,2
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,70,-1,-1,-1},
                                                     {70,0,50,-1,-1},
                                                     {-1,50,0,60,80},
                                                     {-1,-1,60,0,-1},
                                                     {-1,-1,80,-1,0}};
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,18,-1,-1,-1},
                                                     {18,0,15,-1,-1},
                                                     {-1,15,0,14,18},
                                                     {-1,-1,14,0,-1},
                                                     {-1,-1,18,-1,0}};

//Channels
broadcast chan enter_station_request[NUM_TRAINS][NUM_STATIONS];
urgent chan enter_station_reply_ok[NUM_TRAINS][NUM_STATIONS]; //broadcast
urgent chan enter_station_reply_ko[NUM_TRAINS][NUM_STATIONS]; //broadcast
chan exit_station[NUM_STATIONS];
urgent broadcast chan leave_station[NUM_STATIONS];
*/
</declaration>
	<template>
		<name x="5" y="5">Train</name>
		<parameter>const int [0,6] id_train, int charge, const int max_charge, const int speed,  int current_station, const int line, int next_station</parameter>
		<declaration>clock mov_time;
clock waiting_time;

int request_threshold = 2;
int passengers_threshold = 5;



//Functions
int compute_minimal_charge (){
    return MAX_DELAYS[current_station][next_station];
}

int compute_minimal_travel_time (){
    return (DISTANCES[current_station][next_station]/SPEED[id_train]);
}

void decrease_charge(int dec){
    charge -= dec;
    if(charge &lt;= 0){
        charge = 0;
    }
}


void increase_charge(int time_inc){
    charge += (RECHARGING_MULTIPLIER * time_inc);
    if(charge &gt; max_charge){
        charge = max_charge;
    }
}

bool have_to_leave(){
    if(FORCED_TO_LEAVE_COUNT[current_station] &gt; 0){
        return true;
    }
    return false;
}

void train_exited(){
    FORCED_TO_LEAVE_COUNT [current_station] = 0;
}

int leave_max_charge(){
    int spare_time = (compute_minimal_charge() * 2) / 10;
    int charge_to_aim = compute_minimal_charge() - spare_time - compute_minimal_travel_time();
    if(charge_to_aim &gt;= (max_charge-charge)){
        return max_charge-charge;
    }
    return charge_to_aim;
}

int get_minimal_recharge_time (){
    if (compute_minimal_charge() &gt; charge + PASSENGERS_TIME * RECHARGING_MULTIPLIER){
        return (compute_minimal_charge() - charge) / RECHARGING_MULTIPLIER;
    }
    else{
        return PASSENGERS_TIME;
    }
}

void update_train_info(){
    int next_index = 0;
    for (current_index : int[0, NUM_MAX_STATIONS_LINE-1])
    {
        if(LINES[line][current_index] == current_station){ //current index found
            current_station = next_station; //new current station found
            next_index = current_index;
            if(next_index-1 &lt; 0 || LINES[line][next_index-1] == -1){
                next_index = next_index + 1;
            }
            else if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1] == -1){
                next_index = next_index - 1;
            }
            else{
                if(LINES[line][next_index+1] == next_station){
                    next_index = next_index+1;
                }
                else if(LINES[line][next_index-1] == next_station){
                    next_index = next_index-1;
                }
            }
            if(current_index &lt; next_index){
                if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1]== -1)
                {
                    next_index = next_index - 1;
                }
                else
                {
                    next_index = next_index + 1;
                }
            }
            else if(next_index -1 &lt; 0 || LINES[line][next_index-1]== -1)
            {
                next_index +=1;
            }
            else
            {
                next_index -=1;
            }
            next_station = LINES[line][next_index];
            return;
        }
    }
    current_station = next_station;
}</declaration>
		<location id="id0" x="-1538" y="-696">
			<name x="-1589" y="-731">Charging</name>
			<label kind="invariant" x="-1895" y="-705">waiting_time &lt;= (get_minimal_recharge_time()-1)</label>
		</location>
		<location id="id1" x="-1538" y="-501">
			<name x="-1632" y="-501">Overcharging</name>
			<label kind="invariant" x="-1657" y="-484">waiting_time &lt;= 1</label>
		</location>
		<location id="id2" x="-1266" y="-501">
			<name x="-1258" y="-493">Forced_exit</name>
			<committed/>
		</location>
		<location id="id3" x="-926" y="-501">
			<name x="-986" y="-501">Moving</name>
			<label kind="invariant" x="-909" y="-510">mov_time &lt;= compute_minimal_travel_time()</label>
		</location>
		<location id="id4" x="-926" y="-697">
			<name x="-986" y="-697">Waiting</name>
		</location>
		<location id="id5" x="-926" y="-901">
			<name x="-1003" y="-935">Waiting_Request_Delay</name>
			<label kind="invariant" x="-1164" y="-909">waiting_time &lt;= REQUEST_DELAY</label>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="guard" x="-1462" y="-442">not have_to_leave()</label>
			<label kind="assignment" x="-1453" y="-425">increase_charge(1)</label>
			<nail x="-1266" y="-408"/>
			<nail x="-1513" y="-408"/>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id4"/>
			<label kind="guard" x="-1147" y="-824">waiting_time &gt;= REQUEST_DELAY</label>
			<label kind="synchronisation" x="-1207" y="-807">enter_station_request[id_train][next_station]!</label>
			<label kind="assignment" x="-1164" y="-790">decrease_charge(REQUEST_DELAY)</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-841" y="-841">enter_station_reply_ko[id_train][next_station]?</label>
			<label kind="assignment" x="-841" y="-824">waiting_time = 0</label>
			<nail x="-850" y="-697"/>
			<nail x="-850" y="-901"/>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1360" y="-731">enter_station_reply_ok[id_train][next_station]?</label>
			<label kind="assignment" x="-1377" y="-714">mov_time = 0, waiting_time = 0, update_train_info()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-1198" y="-646">mov_time &gt;= compute_minimal_travel_time()</label>
			<label kind="synchronisation" x="-1215" y="-629">enter_station_request[id_train][next_station]!</label>
			<label kind="assignment" x="-1224" y="-612">decrease_charge(compute_minimal_travel_time())</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id3"/>
			<label kind="guard" x="-1504" y="-340">waiting_time &gt;=1 &amp;&amp; charge &gt;= leave_max_charge()</label>
			<label kind="synchronisation" x="-1504" y="-323">exit_station[current_station]!</label>
			<nail x="-1538" y="-340"/>
			<nail x="-926" y="-340"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-1156" y="-552">have_to_leave()</label>
			<label kind="synchronisation" x="-1190" y="-535">exit_station[current_station]!</label>
			<label kind="assignment" x="-1147" y="-518">train_exited()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="select" x="-1530" y="-552">entering_train: int[0, NUM_TRAINS-1]</label>
			<label kind="synchronisation" x="-1589" y="-535">enter_station_request[entering_train][current_station]?</label>
			<label kind="assignment" x="-1470" y="-518">increase_charge(1)</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-2116" y="-561">waiting_time &gt;=1 &amp;&amp; charge &lt; leave_max_charge()</label>
			<label kind="assignment" x="-2031" y="-544">increase_charge(1), waiting_time = 0</label>
			<nail x="-1793" y="-501"/>
			<nail x="-1793" y="-569"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-1870" y="-654">waiting_time &gt;= (get_minimal_recharge_time()-1)</label>
			<label kind="assignment" x="-1972" y="-637">increase_charge(get_minimal_recharge_time()-1), waiting_time = 0</label>
		</transition>
	</template>
	<template>
		<name>Controller</name>
		<parameter>const int [0,4] id_station</parameter>
		<location id="id6" x="0" y="0">
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id6"/>
			<target ref="id6"/>
			<label kind="synchronisation" x="204" y="-68">exit_station[id_station]?</label>
			<nail x="195" y="-93"/>
			<nail x="195" y="0"/>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0,4] id_station,const int max_tracks, int trains_inside</parameter>
		<declaration>//Station variables
int [0, NUM_TRAINS-1] temp_train;


//Station functions
void increase_inside_count(){
    trains_inside += 1;
    if(trains_inside == max_tracks){
        FORCED_TO_LEAVE_COUNT [id_station] = 1;
    }
}

void decrease_inside_count(){
    if(trains_inside == max_tracks){
        FORCED_TO_LEAVE_COUNT [id_station] = 0;
    }
    trains_inside -= 1;
}

bool trains_inside_null (){
    if(trains_inside == 0){
        return true;
    }
    return false;
}

bool authorization_granted(){
    if(trains_inside &lt; max_tracks){
        return true;
    }
    return false;
}</declaration>
		<location id="id7" x="-2592" y="-3110">
			<name x="-2583" y="-3102">Idle</name>
		</location>
		<location id="id8" x="-2379" y="-2821">
			<name x="-2490" y="-2847">Handle_Request</name>
			<committed/>
		</location>
		<init ref="id7"/>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-2320" y="-2745">exit_station[id_station]?</label>
			<label kind="assignment" x="-2320" y="-2728">decrease_inside_count()</label>
			<nail x="-2380" y="-2711"/>
			<nail x="-2320" y="-2711"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2252" y="-3043">not authorization_granted()</label>
			<label kind="synchronisation" x="-2295" y="-3026">enter_station_reply_ko[temp_train][id_station]!</label>
			<nail x="-2159" y="-2822"/>
			<nail x="-2159" y="-3187"/>
			<nail x="-2592" y="-3187"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2923" y="-3110">exit_station[id_station]?</label>
			<label kind="assignment" x="-2924" y="-3094">decrease_inside_count()</label>
			<nail x="-2762" y="-3110"/>
			<nail x="-2762" y="-3059"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2490" y="-3170">authorization_granted()</label>
			<label kind="synchronisation" x="-2541" y="-3136">enter_station_reply_ok[temp_train][id_station]!</label>
			<label kind="assignment" x="-2490" y="-3153">increase_inside_count()</label>
			<nail x="-2379" y="-2932"/>
			<nail x="-2379" y="-3110"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="select" x="-2796" y="-2830">id_train: int[0, NUM_TRAINS-1]</label>
			<label kind="synchronisation" x="-2839" y="-2813">enter_station_request[id_train][id_station]?</label>
			<label kind="assignment" x="-2771" y="-2796">temp_train = id_train</label>
			<nail x="-2592" y="-2821"/>
		</transition>
	</template>
	<system>//SIMPLE SETTINGS
//id_train, charge, max_charge, speed, current_station, line, next_station
train_0 = Train (0, INITIAL_CHARGE[0], MAX_CHARGE[0], SPEED[0], INITIAL_STATION[0], T_LINES[0], NEXT_STATION[0]);
train_1 = Train (1, INITIAL_CHARGE[1], MAX_CHARGE[1], SPEED[1], INITIAL_STATION[1], T_LINES[1], NEXT_STATION[1]);
train_2 = Train (2, INITIAL_CHARGE[2], MAX_CHARGE[2], SPEED[2], INITIAL_STATION[2], T_LINES[2], NEXT_STATION[2]);

//id_station, max_tracks
station_0 = Station(0,MAX_TRACKS[0],INITIAL_TRAINS_INSIDE[0]);
station_1 = Station(1,MAX_TRACKS[1],INITIAL_TRAINS_INSIDE[1]);
station_2 = Station(2,MAX_TRACKS[2],INITIAL_TRAINS_INSIDE[2]);

// List one or more processes to be composed into a system.
system train_0, train_1, train_2, station_0, station_1, station_2;

/*
//COMPLETE SETTINGS
//id_train, charge, max_charge, speed, current_station, line, next_station
train_0 = Train (0, INITIAL_CHARGE[0], MAX_CHARGE[0], SPEED[0], INITIAL_STATION[0], T_LINES[0], NEXT_STATION[0]);
train_1 = Train (1, INITIAL_CHARGE[1], MAX_CHARGE[1], SPEED[1], INITIAL_STATION[1], T_LINES[1], NEXT_STATION[1]);
train_2 = Train (2, INITIAL_CHARGE[2], MAX_CHARGE[2], SPEED[2], INITIAL_STATION[2], T_LINES[2], NEXT_STATION[2]);
train_3 = Train (3, INITIAL_CHARGE[3], MAX_CHARGE[3], SPEED[3], INITIAL_STATION[3], T_LINES[3], NEXT_STATION[3]);
train_4 = Train (4, INITIAL_CHARGE[4], MAX_CHARGE[4], SPEED[4], INITIAL_STATION[4], T_LINES[4], NEXT_STATION[4]);
train_5 = Train (5, INITIAL_CHARGE[5], MAX_CHARGE[5], SPEED[5], INITIAL_STATION[5], T_LINES[5], NEXT_STATION[5]);
train_6 = Train (6, INITIAL_CHARGE[6], MAX_CHARGE[6], SPEED[6], INITIAL_STATION[6], T_LINES[6], NEXT_STATION[6]);

//id_station, max_tracks
station_0 = Station(0,MAX_TRACKS[0],INITIAL_TRAINS_INSIDE[0]);
station_1 = Station(1,MAX_TRACKS[1],INITIAL_TRAINS_INSIDE[1]);
station_2 = Station(2,MAX_TRACKS[2],INITIAL_TRAINS_INSIDE[2]);
station_3 = Station(3,MAX_TRACKS[3],INITIAL_TRAINS_INSIDE[3]);
station_4 = Station(4,MAX_TRACKS[4],INITIAL_TRAINS_INSIDE[4]);

// List one or more processes to be composed into a system.
system train_0, train_1, train_2, train_3, train_4, train_5, train_6, station_0, station_1, station_2, station_3, station_4;
*/</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
