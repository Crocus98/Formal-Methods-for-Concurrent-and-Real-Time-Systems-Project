<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// GLOBAL VARIABLES: Possible configurations are SIMPLE SETTINGS OK, SIMPLE SETTINGS KO and COMPLEX SETTINGS

/*
//[***SIMPLE SETTINGS OK***]
//Train settings
const int NUM_TRAINS = 3;
const int RECHARGING_MULTIPLIER = 4;
const int SPEED[NUM_TRAINS] = {1660, 1162, 1494};  //unit=m/min  100km/h 70km/h 90km/h
const int MAX_CHARGE[NUM_TRAINS] = {32, 34, 38}; //unit=min charge
const int INITIAL_CHARGE[NUM_TRAINS] ={25, 27, 30}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0, 2, 0};
const int T_LINES[NUM_TRAINS] = {0, 0, 0}; //line that the train follows
const int NEXT_STATION[NUM_TRAINS] = {1, 1, 1}; //must be inside the line
const int TRAIN_LAPS[NUM_TRAINS] = {2, 2, 2};

//Station settings
const int NUM_STATIONS = 3;
const int SPARE_TIME = 5; 
const int MAX_TRACKS[NUM_STATIONS] = {2,1,2};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;
int TRAINS_INSIDE[NUM_STATIONS] = {2,0,1};
int WAITING_TRAINS [NUM_STATIONS] = {0,0,0};

//Railways settins
const int NUM_LINES = 2;
const int NUM_MAX_STATIONS_LINE = 3;
const int LINES[NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2},{0,1,-1}};
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,18000,-1},
                                                   {18000,0,12000},
                                                   {-1,12000,0}}; //unit=m
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,50,-1}, 
                                                    {50,0,40},
                                                    {-1,40,0}}; //unit=m
//[*** END SIMPLE SETTINGS OK***]
*/


/*
//[***SIMPLE SETTINGS KO***]
//Train settings
const int NUM_TRAINS = 3;
const int RECHARGING_MULTIPLIER = 4;
const int SPEED[NUM_TRAINS] = {1660, 830, 1494};  //unit=m/min  100km/h 50km/h 90km/h
const int MAX_CHARGE[NUM_TRAINS] = {20, 18, 19}; //unit=min charge
const int INITIAL_CHARGE[NUM_TRAINS] ={15, 12, 12}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0, 2, 0};
const int T_LINES[NUM_TRAINS] = {0, 0, 0}; //line that the train follows
const int NEXT_STATION[NUM_TRAINS] = {1, 1, 1}; //must be inside the line
const int TRAIN_LAPS[NUM_TRAINS] = {2, 2, 2};

//Station settings
const int NUM_STATIONS = 3;
const int SPARE_TIME = 5; 
const int MAX_TRACKS[NUM_STATIONS] = {2,1,2};
const int PASSENGERS_TIME = 4;
const int REQUEST_DELAY = 3;
int TRAINS_INSIDE[NUM_STATIONS] = {2,0,1};
int WAITING_TRAINS [NUM_STATIONS] = {0,0,0};

//Railways settins
const int NUM_LINES = 2;
const int NUM_MAX_STATIONS_LINE = 3;
const int LINES[NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2},{0,1,-1}};
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,18000,-1},
                                                   {18000,0,12000},
                                                   {-1,12000,0}}; //unit=m
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,38,-1},
                                                    {38,0,20},
                                                    {-1,20,0}}; //unit=m
//[*** END SIMPLE SETTINGS KO***]
*/


/*
//[***COMPLEX SETTINGS OK***]
//Train settings
const int NUM_TRAINS = 5;
const int RECHARGING_MULTIPLIER = 4;
const int SPEED[NUM_TRAINS] = {1660, 1162, 1494, 1992, 1328}; //unit=m/min  100km/h 70km/h 90km/h 120km/h 80km/h
const int MAX_CHARGE[NUM_TRAINS] = {32, 38, 34, 30, 36}; //unit=min charge
const int INITIAL_CHARGE[NUM_TRAINS] ={26,32,28,26,30}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0,3,0,4,4};
const int T_LINES[NUM_TRAINS] = {1,2,0,2,1}; //line that the train follows
const int NEXT_STATION[NUM_TRAINS] = {1,2,1,2,2}; //must be inside the line
const int TRAIN_LAPS[NUM_TRAINS] = {2, 1, 1, 2, 1};

//Station settings
const int NUM_STATIONS = 5;
const int SPARE_TIME = 4;
const int MAX_TRACKS[NUM_STATIONS] = {3,2,2,1,2};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;
int TRAINS_INSIDE[NUM_STATIONS] = {2,0,0,1,2};
int WAITING_TRAINS [NUM_STATIONS] = {0,0,0,0,0};
                                                
//Railways settins
const int NUM_LINES = 3;
const int NUM_MAX_STATIONS_LINE = 4;
const int LINES [NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2,3},{0,1,2,4},{3,2,4,-1}};
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,18000,-1,-1,-1},
                                                     {18000,0,15000,-1,-1},
                                                     {-1,15000,0,12000,20000},
                                                     {-1,-1,12000,0,-1},
                                                     {-1,-1,20000,-1,0}};
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,52,-1,-1,-1},
                                                     {52,0,42,-1,-1},
                                                     {-1,42,0,38,60},
                                                     {-1,-1,38,0,-1},
                                                     {-1,-1,60,-1,0}};
//[*** END COMPLEX SETTINGS***]
*/

/*
//[***COMPLEX SETTINGS KO***]
//Train settings
const int NUM_TRAINS = 5;
const int RECHARGING_MULTIPLIER = 4;
const int SPEED[NUM_TRAINS] = {1660, 996, 1494, 1162, 996}; //unit=m/min  100km/h 60km/h 90km/h 70km/h 60km/h
const int MAX_CHARGE[NUM_TRAINS] = {32, 38, 34, 30, 34}; //unit=min charge
const int INITIAL_CHARGE[NUM_TRAINS] ={26,28,28,26,30}; //must be less than MAX_CHARGE
const int INITIAL_STATION[NUM_TRAINS] = {0,3,0,4,4};
const int T_LINES[NUM_TRAINS] = {1,2,0,2,1}; //line that the train follows
const int NEXT_STATION[NUM_TRAINS] = {1,2,1,2,2}; //must be inside the line
const int TRAIN_LAPS[NUM_TRAINS] = {2, 1, 2, 2, 1};

//Station settings
const int NUM_STATIONS = 5;
const int SPARE_TIME = 4;
const int MAX_TRACKS[NUM_STATIONS] = {3,2,1,1,2};
const int PASSENGERS_TIME = 3;
const int REQUEST_DELAY = 2;
int TRAINS_INSIDE[NUM_STATIONS] = {2,0,0,1,2};
int WAITING_TRAINS [NUM_STATIONS] = {0,0,0,0,0};
                                                
//Railways settins
const int NUM_LINES = 3;
const int NUM_MAX_STATIONS_LINE = 4;
const int LINES [NUM_LINES][NUM_MAX_STATIONS_LINE] = {{0,1,2,3},{0,1,2,4},{3,2,4,-1}};
const int DISTANCES [NUM_STATIONS][NUM_STATIONS] ={{0,18000,-1,-1,-1},
                                                     {18000,0,15000,-1,-1},
                                                     {-1,15000,0,15000,20000},
                                                     {-1,-1,15000,0,-1},
                                                     {-1,-1,20000,-1,0}};
const int MAX_DELAYS [NUM_STATIONS][NUM_STATIONS] ={{0,44,-1,-1,-1},
                                                     {44,0,38,-1,-1},
                                                     {-1,38,0,38,40},
                                                     {-1,-1,38,0,-1},
                                                     {-1,-1,40,-1,0}};
//[*** END COMPLEX SETTINGS***]
*/

//Trains and station structure declarations
typedef int[0, NUM_TRAINS - 1] train_t;
typedef int[0, NUM_STATIONS - 1] station_t;

//Channels
chan enter_station_request[NUM_STATIONS];
urgent chan enter_station_reply_ok[NUM_STATIONS];
urgent chan enter_station_reply_ko[NUM_STATIONS];



</declaration>
	<template>
		<name x="5" y="5">Train</name>
		<parameter>const int [0,NUM_TRAINS-1] id_train</parameter>
		<declaration>clock train_clock;
int ride_time = 0;

const int speed = SPEED[id_train];
const int line = T_LINES[id_train];
const int max_charge = MAX_CHARGE[id_train];

int charge = INITIAL_CHARGE[id_train];
int current_station = INITIAL_STATION[id_train];
int next_station = NEXT_STATION[id_train];
int number_of_laps = 0;

//Train Functions
void increase_number_of_laps(){
    if(INITIAL_STATION[id_train] == current_station){
        number_of_laps += 1;
    }
}

void increase_ride_time(int t_inc){
    ride_time += t_inc;
}

void reset_ride_time(){
    ride_time = 0;
}

int get_maximal_delay(){
    return MAX_DELAYS[current_station][next_station];
}

int compute_minimal_charge (){
    int max_delay_charge = get_maximal_delay();
    if(max_delay_charge &gt; max_charge){
        return max_charge;
    }
    return max_delay_charge;
}

int compute_minimal_travel_time (){
    int minimal_travel_time = DISTANCES[current_station][next_station];
    for (number : int[0, 1000]){
        minimal_travel_time -= SPEED[id_train];
        if(minimal_travel_time &lt;=0){
            return number;
        }
    }
    return 0;
}

int get_minimal_recharge_time (){
    if (compute_minimal_charge() &gt; charge + PASSENGERS_TIME * RECHARGING_MULTIPLIER){
        int minimal_charge = compute_minimal_charge() - charge;
        for (number : int[0, 1000]){
            minimal_charge -= RECHARGING_MULTIPLIER;
            if(minimal_charge &lt;=0){
                return number;
            }
        }
    }
    return PASSENGERS_TIME;
}

int max_time_before_leaving(){
    return get_maximal_delay() - SPARE_TIME - compute_minimal_travel_time();
}

void decrease_charge(int dec){
    charge -= dec;
    if(charge &lt;= 0){
        charge = 0;
    }
}

void increase_charge(int time_inc){
    charge += (RECHARGING_MULTIPLIER * time_inc);
    if(charge &gt; max_charge){
        charge = max_charge;
    }
}

void increase_inside_count(){
    TRAINS_INSIDE[next_station] += 1;
}

void decrease_inside_count(){
    TRAINS_INSIDE[current_station] -= 1;
}

bool initial_station(){
    if(INITIAL_STATION[id_train] == current_station){
        return true;
    }
    return false;
}


void increase_waiting_trains(){
    WAITING_TRAINS[next_station] += 1;
}
void decrease_waiting_trains(){
    WAITING_TRAINS[next_station] -= 1;
}

bool forced_to_exit(){
    if(TRAINS_INSIDE[current_station] == MAX_TRACKS[current_station] &amp;&amp; WAITING_TRAINS[current_station] &gt; 0){
        return true;
    }
    else{
        return false;
    }
}

void update_train_info(){
    int next_index = 0;
    for (current_index : int[0, NUM_MAX_STATIONS_LINE-1])
    {
        if(LINES[line][current_index] == current_station){
            current_station = next_station;
            next_index = current_index;
            if(next_index-1 &lt; 0 || LINES[line][next_index-1] == -1){
                next_index = next_index + 1;
            }
            else if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1] == -1){
                next_index = next_index - 1;
            }
            else{
                if(LINES[line][next_index+1] == next_station){
                    next_index = next_index+1;
                }
                else if(LINES[line][next_index-1] == next_station){
                    next_index = next_index-1;
                }
            }
            if(current_index &lt; next_index){
                if(next_index+1 &gt; NUM_MAX_STATIONS_LINE-1 || LINES[line][next_index+1]== -1)
                {
                    next_index = next_index - 1;
                }
                else
                {
                    next_index = next_index + 1;
                }
            }
            else if(next_index -1 &lt; 0 || LINES[line][next_index-1]== -1)
            {
                next_index +=1;
            }
            else
            {
                next_index -=1;
            }
            next_station = LINES[line][next_index];
            return;
        }
    }
    return;
}</declaration>
		<location id="id0" x="-1615" y="-697">
			<name x="-1606" y="-739">Charging</name>
			<label kind="invariant" x="-1606" y="-722">train_clock &lt;= get_minimal_recharge_time()</label>
		</location>
		<location id="id1" x="-1615" y="-502">
			<name x="-1709" y="-502">Overcharging</name>
			<label kind="invariant" x="-1734" y="-484">train_clock &lt;= 1</label>
		</location>
		<location id="id2" x="-756" y="-501">
			<name x="-739" y="-510">Moving</name>
			<label kind="invariant" x="-739" y="-493">train_clock &lt;= compute_minimal_travel_time()</label>
		</location>
		<location id="id3" x="-756" y="-697">
			<name x="-748" y="-688">Waiting</name>
			<committed/>
		</location>
		<location id="id4" x="-756" y="-901">
			<name x="-952" y="-926">Waiting_Request_Delay</name>
			<label kind="invariant" x="-1003" y="-909">train_clock &lt;= REQUEST_DELAY</label>
		</location>
		<location id="id5" x="-2133" y="-697">
			<name x="-2226" y="-748">End_Of_The_Day</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1453" y="-544">forced_to_exit()</label>
			<label kind="assignment" x="-1453" y="-527">train_clock = 0, decrease_inside_count(), increase_charge(1)</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id5"/>
			<label kind="guard" x="-2040" y="-722">initial_station() &amp;&amp; number_of_laps &gt;= TRAIN_LAPS[id_train]</label>
			<label kind="assignment" x="-1938" y="-697">decrease_inside_count()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="-1326" y="-697">enter_station_reply_ok[next_station]?</label>
			<label kind="assignment" x="-1402" y="-680">reset_ride_time(), train_clock = 0, increase_inside_count(), 
decrease_waiting_trains(), update_train_info(), increase_number_of_laps()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="guard" x="-1020" y="-833">train_clock &gt;= REQUEST_DELAY</label>
			<label kind="synchronisation" x="-1020" y="-816">enter_station_request[next_station]!</label>
			<label kind="assignment" x="-1020" y="-799">decrease_charge(REQUEST_DELAY),
increase_ride_time(REQUEST_DELAY)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation" x="-671" y="-841">enter_station_reply_ko[next_station]?</label>
			<label kind="assignment" x="-671" y="-824">train_clock = 0</label>
			<nail x="-680" y="-739"/>
			<nail x="-680" y="-901"/>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="-748" y="-629">train_clock &gt;= compute_minimal_travel_time()</label>
			<label kind="synchronisation" x="-748" y="-612">enter_station_request[next_station]!</label>
			<label kind="assignment" x="-748" y="-595">decrease_charge(compute_minimal_travel_time()), 
increase_ride_time(compute_minimal_travel_time()), 
increase_waiting_trains()</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="guard" x="-1521" y="-340">!forced_to_exit() &amp;&amp; (charge == max_charge || ride_time &gt;= max_time_before_leaving())</label>
			<label kind="assignment" x="-1521" y="-323">decrease_inside_count(), train_clock=0</label>
			<nail x="-1615" y="-341"/>
			<nail x="-756" y="-340"/>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="guard" x="-2278" y="-535">train_clock &gt;=1 &amp;&amp; !forced_to_exit() &amp;&amp;
ride_time &lt; max_time_before_leaving() &amp;&amp; 
charge &lt; max_charge</label>
			<label kind="assignment" x="-2278" y="-484">increase_ride_time(1), increase_charge(1), train_clock = 0</label>
			<nail x="-1870" y="-502"/>
			<nail x="-1870" y="-570"/>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="-2031" y="-654">train_clock &gt;= get_minimal_recharge_time() &amp;&amp; 
(not initial_station() || number_of_laps &lt; TRAIN_LAPS[id_train])</label>
			<label kind="assignment" x="-2031" y="-620">increase_charge(get_minimal_recharge_time()), 
increase_ride_time(get_minimal_recharge_time()), train_clock = 0</label>
		</transition>
	</template>
	<template>
		<name>Station</name>
		<parameter>const int[0,NUM_STATIONS-1] id_station</parameter>
		<declaration>//Station functions
bool authorization_granted(){
    if(TRAINS_INSIDE[id_station] &lt; MAX_TRACKS[id_station]){
        return true;
    }
    return false;
}



</declaration>
		<location id="id6" x="-2592" y="-3110">
			<name x="-2601" y="-3145">Idle</name>
		</location>
		<location id="id7" x="-2210" y="-2728">
			<name x="-2346" y="-2754">Handle_Request</name>
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-2507" y="-3043">not authorization_granted()</label>
			<label kind="synchronisation" x="-2490" y="-3026">enter_station_reply_ko[id_station]!</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id6"/>
			<label kind="guard" x="-2465" y="-3170">authorization_granted()</label>
			<label kind="synchronisation" x="-2490" y="-3153">enter_station_reply_ok[id_station]!</label>
			<nail x="-2210" y="-2958"/>
			<nail x="-2210" y="-3111"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-2822" y="-2745">enter_station_request[id_station]?</label>
			<nail x="-2592" y="-2728"/>
		</transition>
	</template>
	<system>//Processes
system Train, Station;
</system>
	<queries>
		<query>
			<formula>A[] ( TRAINS_INSIDE[Station(4).id_station] &lt;= MAX_TRACKS[Station(4).id_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( TRAINS_INSIDE[Station(3).id_station] &lt;= MAX_TRACKS[Station(3).id_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( TRAINS_INSIDE[Station(2).id_station] &lt;= MAX_TRACKS[Station(2).id_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( TRAINS_INSIDE[Station(1).id_station] &lt;= MAX_TRACKS[Station(1).id_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( TRAINS_INSIDE[Station(0).id_station] &lt;= MAX_TRACKS[Station(0).id_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(4).ride_time &lt;= MAX_DELAYS[Train(4).current_station][Train(4).next_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(3).ride_time &lt;= MAX_DELAYS[Train(3).current_station][Train(3).next_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(2).ride_time &lt;= MAX_DELAYS[Train(2).current_station][Train(2).next_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(1).ride_time &lt;= MAX_DELAYS[Train(1).current_station][Train(1).next_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(0).ride_time &lt;= MAX_DELAYS[Train(0).current_station][Train(0).next_station] )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(4).charge &gt; 0 )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(3).charge &gt; 0 )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(2).charge &gt; 0 )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(1).charge &gt; 0 )</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] ( Train(0).charge &gt; 0 )</formula>
			<comment></comment>
		</query>
	</queries>
</nta>
